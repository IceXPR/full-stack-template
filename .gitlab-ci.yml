image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  CI_DEBUG_SERVICES: "true"

  # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376

  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml

  DOCKER_TLS_CERTDIR: "/certs"

  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125

  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_DRIVER: overlay2

  CONTAINER_TAG: ${CI_PIPELINE_IID}

  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SCAN_KUBERNETES_MANIFESTS: "true"

  AGENT_NAME: superaccelerator-jaclab
  KUBE_CONTEXT: ${CI_PROJECT_PATH}:${AGENT_NAME}

stages:
  - test
  - build
  - deploy

test-backend:
  stage: test
  image: node:22
  script:
    - cd platform/backend
    - npm install
    - npm test -- --coverage
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: on_success

build-backend:
  stage: build
  image: docker:24.0
  services:
    - name: docker:24.0-dind
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY" 
    - echo Building container "$CI_REGISTRY_IMAGE/backend-app:$CONTAINER_TAG"
    - docker build -t "$CI_REGISTRY_IMAGE/backend-app:latest" platform/backend
    - docker build -t "$CI_REGISTRY_IMAGE/backend-app:$CONTAINER_TAG" platform/backend
    - docker push "$CI_REGISTRY_IMAGE/backend-app:latest"
    - docker push "$CI_REGISTRY_IMAGE/backend-app:$CONTAINER_TAG"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
  #   - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  #     changes:
  #       - platform/backend/**/*
  #     when: always
  #   - if: $CI_PIPELINE_SOURCE == "push"
  #     changes:
  #       - platform/backend/**/*
  #     when: always

build-frontend:
  stage: build
  image: docker:24.0
  services:
    - name: docker:24.0-dind
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY" 
    - echo Building container "$CI_REGISTRY_IMAGE/backend-app:$CONTAINER_TAG"
    - docker build -t "$CI_REGISTRY_IMAGE/frontend-app:latest" platform/frontend
    - docker build -t "$CI_REGISTRY_IMAGE/frontend-app:$CONTAINER_TAG" platform/frontend
    - docker push "$CI_REGISTRY_IMAGE/frontend-app:latest"
    - docker push "$CI_REGISTRY_IMAGE/frontend-app:$CONTAINER_TAG"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: on_success
  # rules:
  #   - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  #     changes:
  #       - platform/frontend/**/*
  #     when: always
  #   - if: $CI_PIPELINE_SOURCE == "push"
  #     changes:
  #       - platform/frontend/**/*
  #     when: always

deploy:
  stage: deploy
  image: 
    name: alpine/helm:3.15.4
    entrypoint: [""]
  environment:
    name: production
    kubernetes:
      namespace: $APPLICATION_NAME 
  before_script:
    # Install dependencies and verify Helm
    - apk add --no-cache bash curl
    - helm version
    # Add Helm repository
    - helm repo add gila-repo https://charts.gitlab.io # Replace with your chart registry URL
    - helm repo update
  script:
    # Verify Helm command
      # --atomic
      # --timeout 5m
    - echo $KUBE_CONTEXT
    - helm version
    - helm upgrade --install $APPLICATION_NAME ./helm
      --namespace $APPLICATION_NAMESPACE
      --create-namespace
      --debug
      --set frontend.image.repository="$CI_REGISTRY_IMAGE/frontend-app"
      --set frontend.image.tag="$CONTAINER_TAG"
      --set backend.image.repository="$CI_REGISTRY_IMAGE/backend-app"
      --set backend.image.tag="$CONTAINER_TAG"
      --set backend.database.host=$DB_HOST
      --set backend.database.name=$DB_DATABASE
      --set backend.database.credentials.username=$DB_USERNAME
      --set backend.database.credentials.password=$DB_PASSWORD
      --set imagePullSecrets.password=$REGISTRY_PASSWORD
      --kube-context="$KUBE_CONTEXT"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: on_success
  

